From 7400d8412fe85c1476f426802d9835b1af633b60 Mon Sep 17 00:00:00 2001
From: Yuri Konotopov <ykonotopov@gnome.org>
Date: Wed, 15 Apr 2020 13:56:52 +0400
Subject: [PATCH 07/99] iommu: arm-smmu: add option to skip AARCH64 context
 format probe

Unfortunatelly there are devices exists without proper support for AARCH64
context format (like mido) so we ending up with OOPS in msm_tz_set_cb_format:

[<ffffff800857be2c>] msm_tz_set_cb_format+0x7c/0xac
[<ffffff8008675508>] arm_smmu_attach_dev+0x8b0/0x9e4
[<ffffff8008668f08>] __iommu_attach_device+0x30/0x11c
[<ffffff8008669900>] iommu_attach_group+0x70/0xa4
[<ffffff80080a027c>] arm_iommu_attach_device+0xa8/0x344
[<ffffff80084ff364>] mdss_smmu_attach_v2+0xa8/0x244
[<ffffff80084b23f8>] mdss_iommu_ctrl+0x1ac/0x234
[<ffffff80084fd6c8>] mdss_mdp_splash_iommu_attach+0xa0/0x13c
[<ffffff80084fd3fc>] mdss_mdp_splash_cleanup+0x144/0x370
[<ffffff80084efedc>] mdss_mdp_overlay_start+0x1d0/0x250
[<ffffff80084f0920>] mdss_mdp_overlay_kickoff+0x130/0x15fc
[<ffffff80084f39bc>] mdss_mdp_overlay_off+0x264/0x870
[<ffffff8008534cdc>] mdss_fb_blank_blank+0xd4/0x198
[<ffffff80085347b8>] mdss_fb_blank_sub+0x188/0x2b8
[<ffffff8008536cf8>] mdss_fb_blank+0xf4/0x154
[<ffffff80084ac308>] do_fb_ioctl+0x5a8/0x7b8
[<ffffff80084aa7c8>] fb_ioctl+0x44/0x4c
[<ffffff8008242210>] do_vfs_ioctl+0x800/0xbd8
[<ffffff8008242670>] SyS_ioctl+0x88/0x94
[<ffffff8008084580>] el0_svc_naked+0x34/0x38

However in case with mido this oops is happens while attaching to APPS iommu,
but GPU iommu is not affected. So we need new dts flag to optionally disable
aarch64 context format for some iommus.

See-Also: https://github.com/nE0sIghT/android_kernel_xiaomi_msm8953/issues/1
See-Also: https://github.com/nE0sIghT/android_kernel_xiaomi_msm8953/issues/5
---
 drivers/iommu/arm-smmu.c           | 9 +++++++++
 include/dt-bindings/arm/arm-smmu.h | 1 +
 2 files changed, 10 insertions(+)

diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c
index 004460d85018..986267d6ece7 100755
--- a/drivers/iommu/arm-smmu.c
+++ b/drivers/iommu/arm-smmu.c
@@ -580,6 +580,7 @@ static struct arm_smmu_option_prop arm_smmu_options[] = {
 	{ ARM_SMMU_OPT_MMU500_ERRATA1, "qcom,mmu500-errata-1" },
 	{ ARM_SMMU_OPT_STATIC_CB, "qcom,enable-static-cb"},
 	{ ARM_SMMU_OPT_HALT, "qcom,enable-smmu-halt"},
+	{ ARM_SMMU_OPT_NO_AARCH64, "qcom,no-aarch64"},
 	{ 0, NULL},
 };
 
@@ -684,6 +685,11 @@ static bool arm_smmu_is_static_cb(struct arm_smmu_device *smmu)
 	return smmu->options & ARM_SMMU_OPT_STATIC_CB;
 }
 
+static bool arm_smmu_no_aarch64(struct arm_smmu_device *smmu)
+{
+	return smmu->options & ARM_SMMU_OPT_NO_AARCH64;
+}
+
 static bool arm_smmu_has_secure_vmid(struct arm_smmu_domain *smmu_domain)
 {
 	return (smmu_domain->secure_vmid != VMID_INVAL);
@@ -4571,12 +4577,15 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)
 	} else {
 		size = (id >> ID2_UBS_SHIFT) & ID2_UBS_MASK;
 		smmu->va_size = arm_smmu_id_size_to_bits(size);
+
+		if(!arm_smmu_no_aarch64(smmu)) {
 		if (id & ID2_PTFS_4K)
 			smmu->features |= ARM_SMMU_FEAT_FMT_AARCH64_4K;
 		if (id & ID2_PTFS_16K)
 			smmu->features |= ARM_SMMU_FEAT_FMT_AARCH64_16K;
 		if (id & ID2_PTFS_64K)
 			smmu->features |= ARM_SMMU_FEAT_FMT_AARCH64_64K;
+		}
 	}
 
 	/* Now we've corralled the various formats, what'll it do? */
diff --git a/include/dt-bindings/arm/arm-smmu.h b/include/dt-bindings/arm/arm-smmu.h
index 3a1dbd333e2a..be57849d8be8 100644
--- a/include/dt-bindings/arm/arm-smmu.h
+++ b/include/dt-bindings/arm/arm-smmu.h
@@ -23,5 +23,6 @@
 #define ARM_SMMU_OPT_MMU500_ERRATA1	(1 << 7)
 #define ARM_SMMU_OPT_STATIC_CB          (1 << 8)
 #define ARM_SMMU_OPT_HALT               (1 << 9)
+#define ARM_SMMU_OPT_NO_AARCH64         (1 << 10)
 
 #endif
-- 
2.20.1

