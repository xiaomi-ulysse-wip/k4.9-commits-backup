From b19fd5f292f6e8b1c33de0666c3b631a2b6bccde Mon Sep 17 00:00:00 2001
From: Sheep Sun <sunxiaoyang2003@gmail.com>
Date: Sun, 15 Mar 2020 21:37:24 +0800
Subject: [PATCH 088/110] Add ramoops from JasperKernel

---
 fs/pstore/Kconfig      |  8 +++++
 fs/pstore/inode.c      | 41 +++++++++++++++++++++++++
 fs/pstore/ram.c        | 68 ++++++++++++++++++++++++++++++++++++++++++
 kernel/printk/printk.c |  8 +++++
 4 files changed, 125 insertions(+)

diff --git a/fs/pstore/Kconfig b/fs/pstore/Kconfig
index be40813eff52..3ff4261ccaa0 100644
--- a/fs/pstore/Kconfig
+++ b/fs/pstore/Kconfig
@@ -87,3 +87,11 @@ config PSTORE_RAM
 	  "ramoops.ko".
 
 	  For more information, see Documentation/ramoops.txt.
+
+config PSTORE_LAST_KMSG
+	bool "export /proc/last_kmsg"
+	default y
+	depends on PSTORE
+	help
+	  When the option is enabled, pstore will export a proc filesystem
+	  interface /proc/last_kmsg.
diff --git a/fs/pstore/inode.c b/fs/pstore/inode.c
index 1781dc50762e..f0158b196074 100644
--- a/fs/pstore/inode.c
+++ b/fs/pstore/inode.c
@@ -37,6 +37,9 @@
 #include <linux/spinlock.h>
 #include <linux/uaccess.h>
 #include <linux/syslog.h>
+#ifdef CONFIG_PSTORE_LAST_KMSG
+#include <linux/proc_fs.h>
+#endif
 
 #include "internal.h"
 
@@ -292,6 +295,25 @@ bool pstore_is_mounted(void)
 	return pstore_sb != NULL;
 }
 
+#ifdef CONFIG_PSTORE_LAST_KMSG
+static char *console_buffer;
+static ssize_t console_bufsize;
+
+static ssize_t last_kmsg_read(struct file *file, char __user *buf,
+		size_t len, loff_t *offset)
+{
+	return simple_read_from_buffer(buf, len, offset,
+			console_buffer, console_bufsize);
+}
+
+static const struct file_operations last_kmsg_fops = {
+	.owner          = THIS_MODULE,
+	.read           = last_kmsg_read,
+	.llseek         = default_llseek,
+};
+#endif
+
+
 /*
  * Make a regular file in the root directory of our file system.
  * Load it up with "size" bytes of data from "buf".
@@ -396,6 +418,13 @@ int pstore_mkfile(enum pstore_type_id type, char *psname, u64 id, int count,
 	list_add(&private->list, &allpstore);
 	spin_unlock_irqrestore(&allpstore_lock, flags);
 
+#ifdef CONFIG_PSTORE_LAST_KMSG
+	if (type == PSTORE_TYPE_CONSOLE) {
+		console_buffer = private->data;
+		console_bufsize = size;
+	}
+#endif
+
 	inode_unlock(d_inode(root));
 
 	return 0;
@@ -465,6 +494,9 @@ static struct file_system_type pstore_fs_type = {
 static int __init init_pstore_fs(void)
 {
 	int err;
+#ifdef CONFIG_PSTORE_LAST_KMSG
+	struct proc_dir_entry *last_kmsg_entry = NULL;
+#endif
 
 	/* Create a convenient mount point for people to access pstore */
 	err = sysfs_create_mount_point(fs_kobj, "pstore");
@@ -475,6 +507,15 @@ static int __init init_pstore_fs(void)
 	if (err < 0)
 		sysfs_remove_mount_point(fs_kobj, "pstore");
 
+#ifdef CONFIG_PSTORE_LAST_KMSG
+	last_kmsg_entry = proc_create_data("last_kmsg", S_IFREG | S_IRUGO,
+			NULL, &last_kmsg_fops, NULL);
+	if (!last_kmsg_entry) {
+		pr_err("Failed to create last_kmsg\n");
+		goto out;
+	}
+#endif
+
 out:
 	return err;
 }
diff --git a/fs/pstore/ram.c b/fs/pstore/ram.c
index 9d5dd6260061..1ff0ea26d176 100644
--- a/fs/pstore/ram.c
+++ b/fs/pstore/ram.c
@@ -36,6 +36,7 @@
 #include <linux/pstore_ram.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
+#include <linux/memblock.h>
 
 #define RAMOOPS_KERNMSG_HDR "===="
 #define MIN_MEM_SIZE 4096UL
@@ -738,6 +739,27 @@ static struct platform_driver ramoops_driver = {
 	},
 };
 
+extern void emergency_unlock_console(void);
+static int ramoops_console_notify (struct notifier_block *this,
+		unsigned long event, void *ptr)
+{
+	printk("\n");
+	pr_emerg("ramoops unlock console ...\n");
+	emergency_unlock_console();
+
+	return 0;
+}
+
+static struct notifier_block ramoop_nb = {
+	.notifier_call = ramoops_console_notify,
+	.priority = INT_MAX,
+};
+
+static void ramoops_prepare(void)
+{
+	atomic_notifier_chain_register(&panic_notifier_list, &ramoop_nb);
+}
+
 static void ramoops_register_dummy(void)
 {
 	if (!mem_size)
@@ -773,9 +795,54 @@ static void ramoops_register_dummy(void)
 	}
 }
 
+
+static struct ramoops_platform_data ramoops_data;
+
+static struct platform_device ramoops_dev  = {
+	.name = "ramoops",
+	.dev = {
+		.platform_data = &ramoops_data,
+	},
+};
+
+static int __init ramoops_memreserve(char *p)
+{
+	unsigned long size;
+
+	if (!p)
+		return 1;
+
+	size = memparse(p, &p) & PAGE_MASK;
+	ramoops_data.mem_size = size;
+	ramoops_data.mem_address = 0xB0000000;
+	ramoops_data.console_size = size / 2;
+	ramoops_data.pmsg_size = size / 2;
+	ramoops_data.dump_oops = 1;
+
+	pr_info("msm_reserve_ramoops_memory addr=%lx,size=%lx\n",
+			ramoops_data.mem_address, ramoops_data.mem_size);
+	pr_info("msm_reserve_ramoops_memory record_size=%lx,ftrace_size=%lx\n",
+			ramoops_data.record_size, ramoops_data.ftrace_size);
+
+	memblock_reserve(ramoops_data.mem_address, ramoops_data.mem_size);
+
+	return 0;
+}
+early_param("ramoops_memreserve", ramoops_memreserve);
+
+static int __init msm_register_ramoops_device(void)
+{
+	pr_info("msm_register_ramoops_device\n");
+	if (platform_device_register(&ramoops_dev))
+		pr_info("Unable to register ramoops platform device\n");
+	return 0;
+}
+core_initcall(msm_register_ramoops_device);
+
 static int __init ramoops_init(void)
 {
 	ramoops_register_dummy();
+	ramoops_prepare();
 	return platform_driver_register(&ramoops_driver);
 }
 postcore_initcall(ramoops_init);
@@ -785,6 +852,7 @@ static void __exit ramoops_exit(void)
 	platform_driver_unregister(&ramoops_driver);
 	platform_device_unregister(dummy);
 	kfree(dummy_data);
+	atomic_notifier_chain_unregister(&panic_notifier_list, &ramoop_nb);
 }
 module_exit(ramoops_exit);
 
diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 96592f1192b3..734b8d15af02 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -2135,8 +2135,16 @@ void resume_console(void)
 	console_unlock();
 }
 
+void emergency_unlock_console(void)
+{
+	console_suspended = 0;
+}
+EXPORT_SYMBOL(emergency_unlock_console);
+
 #ifdef CONFIG_CONSOLE_FLUSH_ON_HOTPLUG
 
+
+
 /**
  * console_cpu_notify - print deferred console messages after CPU hotplug
  * @self: notifier struct
-- 
2.20.1

