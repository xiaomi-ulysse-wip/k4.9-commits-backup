From 26a86b555b81df15bc6d017516f06fe6fbc11fe9 Mon Sep 17 00:00:00 2001
From: "R. Adi Permana" <romadhonadipermana279f@gmail.com>
Date: Mon, 24 Aug 2020 23:31:36 +0700
Subject: [PATCH 033/110] power: bq2560x: Adapt to 4.9 kernel

Added usb power supply and extcon support for msm-4.9
---
 drivers/power/supply/qcom/bq2560x_charger.c | 201 ++++++++++++++++----
 1 file changed, 168 insertions(+), 33 deletions(-)

diff --git a/drivers/power/supply/qcom/bq2560x_charger.c b/drivers/power/supply/qcom/bq2560x_charger.c
index ba8eeb3e9bee..88e33fefd701 100644
--- a/drivers/power/supply/qcom/bq2560x_charger.c
+++ b/drivers/power/supply/qcom/bq2560x_charger.c
@@ -30,6 +30,7 @@
 #include <linux/of_device.h>
 #include <linux/of_gpio.h>
 #include <linux/err.h>
+#include <linux/extcon.h>
 #include <linux/regulator/driver.h>
 #include <linux/regulator/of_regulator.h>
 #include <linux/regulator/machine.h>
@@ -103,6 +104,11 @@ struct bq2560x_otg_regulator {
 	struct regulator_dev	*rdev;
 };
 
+static const unsigned int bq2560x_extcon_cable[] = {
+	EXTCON_USB,
+	EXTCON_USB_HOST,
+	EXTCON_NONE,
+};
 
 struct bq2560x {
 	struct device *dev;
@@ -203,12 +209,15 @@ struct bq2560x {
 	struct alarm jeita_alarm;
 
 	struct dentry *debug_root;
+	enum power_supply_type		usb_supply_type;
 
 	struct bq2560x_otg_regulator otg_vreg;
 
 	struct power_supply *usb_psy;
 	struct power_supply *bms_psy;
 
+	struct power_supply_desc usb_psy_desc;
+	struct power_supply_desc	parallel_psy_desc;
 	struct power_supply_desc batt_psy_d;
 	struct power_supply *batt_psy;
 	#ifdef THERMAL_CONFIG_FB
@@ -217,6 +226,7 @@ struct bq2560x {
 	unsigned int therm_lvl_reserved;
 	bool backlight_off;
 	#endif
+	struct extcon_dev		*extcon;
 
 };
 
@@ -798,6 +808,7 @@ static int bq2560x_get_prop_batt_present(struct bq2560x *bq)
 
 }
 
+
 static int bq2560x_get_prop_batt_full(struct bq2560x *bq)
 {
 	union power_supply_propval batt_prop = {0,};
@@ -1000,6 +1011,90 @@ static int bq2560x_charger_get_property(struct power_supply *psy,
 
 static int bq2560x_system_temp_level_set(struct bq2560x *bq, int);
 
+static enum power_supply_property bq2560x_usb_properties[] = {
+	POWER_SUPPLY_PROP_PRESENT,
+	POWER_SUPPLY_PROP_ONLINE,
+	POWER_SUPPLY_PROP_CURRENT_MAX,
+	POWER_SUPPLY_PROP_TYPE,
+	POWER_SUPPLY_PROP_REAL_TYPE,
+	POWER_SUPPLY_PROP_SDP_CURRENT_MAX,
+};
+
+static int bq2560x_usb_get_property(struct power_supply *psy,
+				  enum power_supply_property psp,
+				  union power_supply_propval *val)
+{
+	int is_battery_charging = 0;
+	struct bq2560x *bq = power_supply_get_drvdata(psy);
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_SDP_CURRENT_MAX:
+	case POWER_SUPPLY_PROP_CURRENT_MAX:
+		val->intval = bq->usb_psy_ma * 1000;
+		break;
+	case POWER_SUPPLY_PROP_PRESENT:
+		val->intval = bq->usb_present;
+		break;
+	case POWER_SUPPLY_PROP_ONLINE:
+		is_battery_charging = bq2560x_get_prop_charge_status(bq);
+		val->intval = bq->usb_present &&
+			(is_battery_charging == POWER_SUPPLY_STATUS_CHARGING);
+		break;
+	case POWER_SUPPLY_PROP_REAL_TYPE:
+		val->intval = POWER_SUPPLY_TYPE_UNKNOWN;
+		if (bq->usb_present &&
+			(bq->usb_supply_type != POWER_SUPPLY_TYPE_UNKNOWN))
+			val->intval = bq->usb_supply_type;
+		break;
+	case POWER_SUPPLY_PROP_TYPE:
+		val->intval = POWER_SUPPLY_TYPE_USB;
+		if (bq->usb_present &&
+			(bq->usb_supply_type != POWER_SUPPLY_TYPE_UNKNOWN))
+			val->intval = bq->usb_supply_type;
+		break;
+	default:
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int bq2560x_usb_set_property(struct power_supply *psy,
+				  enum power_supply_property psp,
+				  const union power_supply_propval *val)
+{
+	struct bq2560x *bq = power_supply_get_drvdata(psy);
+	//int rc = 0;
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_SDP_CURRENT_MAX:
+	case POWER_SUPPLY_PROP_CURRENT_MAX:
+		bq->usb_psy_ma = val->intval / 1000;
+		//rc = bq2560x_set_appropriate_usb_current(bq);
+		break;
+	case POWER_SUPPLY_PROP_TYPE:
+	case POWER_SUPPLY_PROP_REAL_TYPE:
+		bq->usb_supply_type = val->intval;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	power_supply_changed(psy);
+	return 0;
+}
+
+static int bq2560x_usb_is_writeable(struct power_supply *psy,
+			enum power_supply_property psp)
+{
+	switch (psp) {
+	case POWER_SUPPLY_PROP_CURRENT_MAX:
+		return 1;
+	default:
+		break;
+	}
+	return 0;
+}
+
 static int bq2560x_charger_set_property(struct power_supply *psy,
 				       enum power_supply_property prop,
 				       const union power_supply_propval *val)
@@ -1256,6 +1351,7 @@ static int bq2560x_psy_register(struct bq2560x *bq)
 static void bq2560x_psy_unregister(struct bq2560x *bq)
 {
 	power_supply_unregister(bq->batt_psy);
+	power_supply_unregister(bq->usb_psy);
 }
 
 
@@ -1319,29 +1415,22 @@ struct regulator_ops bq2560x_otg_reg_ops = {
 static int bq2560x_regulator_init(struct bq2560x *bq)
 {
 	int ret = 0;
-	struct regulator_init_data *init_data;
+	
 	struct regulator_config cfg = {};
 
-	init_data = of_get_regulator_init_data_bq(bq->dev, bq->dev->of_node, &bq->otg_vreg.rdesc);
-	if (!init_data) {
-		dev_err(bq->dev, "Unable to allocate memory\n");
-		return -ENOMEM;
-	}
 
-	if (init_data->constraints.name) {
 		bq->otg_vreg.rdesc.owner = THIS_MODULE;
 		bq->otg_vreg.rdesc.type = REGULATOR_VOLTAGE;
 		bq->otg_vreg.rdesc.ops = &bq2560x_otg_reg_ops;
-		bq->otg_vreg.rdesc.name = init_data->constraints.name;
+		bq->otg_vreg.rdesc.of_match = bq->dev->of_node->name;
+		bq->otg_vreg.rdesc.name = bq->dev->of_node->name;
 		pr_info("regualtor name = %s\n", bq->otg_vreg.rdesc.name);
 
 		cfg.dev = bq->dev;
-		cfg.init_data = init_data;
+
 		cfg.driver_data = bq;
 		cfg.of_node = bq->dev->of_node;
 
-		init_data->constraints.valid_ops_mask
-			|= REGULATOR_CHANGE_STATUS;
 
 		bq->otg_vreg.rdev = regulator_register(
 					&bq->otg_vreg.rdesc, &cfg);
@@ -1352,7 +1441,7 @@ static int bq2560x_regulator_init(struct bq2560x *bq)
 				dev_err(bq->dev,
 					"OTG reg failed, rc=%d\n", ret);
 		}
-	}
+	
 
 	return ret;
 }
@@ -2029,7 +2118,10 @@ static irqreturn_t bq2560x_charger_interrupt(int irq, void *dev_id)
 	if(!bq->power_good) {
 	    if(bq->usb_present) {
 			bq->usb_present = false;
-			power_supply_set_present(bq->usb_psy, bq->usb_present);
+			extcon_set_cable_state_(bq->extcon, EXTCON_USB, false);
+			bq->usb_supply_type = POWER_SUPPLY_TYPE_UNKNOWN;
+			
+			//power_supply_set_present(bq->usb_psy, bq->usb_present);
 		}
 
 		if (bq->software_jeita_supported) {
@@ -2045,7 +2137,8 @@ static irqreturn_t bq2560x_charger_interrupt(int irq, void *dev_id)
 	} else if (bq->power_good && !bq->usb_present) {
 		bq->usb_present = true;
 		msleep(10);/*for cdp detect*/
-		power_supply_set_present(bq->usb_psy, bq->usb_present);
+		//power_supply_set_present(bq->usb_psy, bq->usb_present);
+		extcon_set_cable_state_(bq->extcon, EXTCON_USB, true);
 
 		cancel_delayed_work(&bq->discharge_jeita_work);
 
@@ -2058,6 +2151,7 @@ static irqreturn_t bq2560x_charger_interrupt(int irq, void *dev_id)
 
 		pr_err("usb plugged in, set usb present = %d\n", bq->usb_present);
 	}
+	power_supply_changed(bq->usb_psy);
 	
 	bq2560x_update_status(bq);
 
@@ -2078,6 +2172,13 @@ static void determine_initial_status(struct bq2560x *bq)
 		bq->in_hiz = !!status;
 
 	bq2560x_charger_interrupt(bq->client->irq, bq);
+	if(!bq->usb_present) {
+		extcon_set_cable_state_(bq->extcon, EXTCON_USB, false);
+	}
+	else {
+		extcon_set_cable_state_(bq->extcon, EXTCON_USB, true);
+	}
+	power_supply_changed(bq->usb_psy);
 }
 
 
@@ -2368,22 +2469,12 @@ static int bq2560x_charger_probe(struct i2c_client *client,
 					const struct i2c_device_id *id)
 {
 	struct bq2560x *bq;
-	struct power_supply *usb_psy;
+
+	struct power_supply_config usb_psy_cfg= {};
 	struct power_supply *bms_psy;
 
 	int ret = 0;
 	
-	usb_psy = power_supply_get_by_name("usb");
-	if (!usb_psy) {
-		dev_dbg(&client->dev, "USB supply not found, defer probe\n");
-		return -EPROBE_DEFER;
-	}
-
-	bms_psy = power_supply_get_by_name("bms");
-	if (!bms_psy) {
-		dev_dbg(&client->dev, "bms supply not found, defer probe\n");
-		return -EPROBE_DEFER;
-	}
 
 	bq = devm_kzalloc(&client->dev, sizeof(struct bq2560x), GFP_KERNEL);
 	if (!bq) {
@@ -2392,10 +2483,24 @@ static int bq2560x_charger_probe(struct i2c_client *client,
 	}
 
 	bq->dev = &client->dev;
-	bq->usb_psy = usb_psy;
+	bq->client = client;
 	bq->bms_psy = bms_psy;
+	bq->usb_supply_type = POWER_SUPPLY_TYPE_UNKNOWN;
+	bq->extcon = devm_extcon_dev_allocate(bq->dev,
+		bq2560x_extcon_cable);
+	if(IS_ERR(bq->extcon)) {
+		pr_err("bq2560x: failed to allocate extcon device\n");
+		ret = PTR_ERR(bq->extcon);
+		return ret;
+	}
 
-	bq->client = client;
+	ret = devm_extcon_dev_register(bq->dev, bq->extcon);
+	if(ret){
+		pr_err("bq2560x: failed to register extcon device\n");
+		return ret;
+	}
+
+	
 	i2c_set_clientdata(client, bq);
 	
 	mutex_init(&bq->i2c_rw_lock);
@@ -2406,6 +2511,35 @@ static int bq2560x_charger_probe(struct i2c_client *client,
 
 	bq->resume_completed = true;
 	bq->irq_waiting = false;
+	bq->usb_psy_desc.name = "usb";
+	bq->usb_psy_desc.type =  POWER_SUPPLY_TYPE_USB;
+	bq->usb_psy_desc.get_property = bq2560x_usb_get_property;
+	bq->usb_psy_desc.set_property = bq2560x_usb_set_property;
+	bq->usb_psy_desc.properties = bq2560x_usb_properties;
+	bq->usb_psy_desc.num_properties = ARRAY_SIZE(bq2560x_usb_properties);
+	bq->usb_psy_desc.property_is_writeable = bq2560x_usb_is_writeable;
+	usb_psy_cfg.drv_data = bq;
+	usb_psy_cfg.num_supplicants = 0;
+	bq->usb_psy = devm_power_supply_register(bq->dev, &bq->usb_psy_desc, &usb_psy_cfg);
+	
+	if(IS_ERR(bq->usb_psy)){
+		dev_err(bq->dev, "bq2560x: Unable to register usb_psy rc = %ld\n",
+					PTR_ERR(bq->usb_psy));
+		ret = PTR_ERR(bq->usb_psy);
+		return ret;
+	}
+
+	bq->usb_psy = power_supply_get_by_name("usb");
+	if(IS_ERR(bq->usb_psy)){
+		dev_dbg(&client->dev, "USB supply not found, defer probe\n");
+		return -EPROBE_DEFER;
+	}
+
+	bq->bms_psy = power_supply_get_by_name("bms");
+	if(IS_ERR(bq->bms_psy)){
+		dev_dbg(&client->dev, "bms supply not found, defer probe\n");
+		return -EPROBE_DEFER;
+	}
 	
 	ret = bq2560x_detect_device(bq);
 	if(ret) {
@@ -2547,6 +2681,7 @@ static int bq2560x_resume(struct device *dev)
 
 	return 0;
 }
+
 static int bq2560x_charger_remove(struct i2c_client *client)
 {
 	struct bq2560x *bq = i2c_get_clientdata(client);
@@ -2603,10 +2738,10 @@ static const struct dev_pm_ops bq2560x_pm_ops = {
 };
 static struct i2c_driver bq2560x_charger_driver = {
 	.driver 	= {
-		.name 	= "bq2560x-charger",
-		.owner 	= THIS_MODULE,
-		.of_match_table = bq2560x_charger_match_table,
-		.pm		= &bq2560x_pm_ops,
+	.name 	= "bq2560x-charger",
+	.owner 	= THIS_MODULE,
+	.of_match_table = bq2560x_charger_match_table,
+	.pm		= &bq2560x_pm_ops,
 	},
 	.id_table	= bq2560x_charger_id,
 	
@@ -2620,4 +2755,4 @@ module_i2c_driver(bq2560x_charger_driver);
 
 MODULE_DESCRIPTION("TI BQ2560x Charger Driver");
 MODULE_LICENSE("GPL v2");
-MODULE_AUTHOR("Texas Instruments");
+MODULE_AUTHOR("Texas Instruments");
\ No newline at end of file
-- 
2.20.1

