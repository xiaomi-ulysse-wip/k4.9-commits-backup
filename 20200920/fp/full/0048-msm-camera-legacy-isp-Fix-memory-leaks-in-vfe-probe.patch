From 79386c0a9f438a7cb229a9693f036277ecbe2597 Mon Sep 17 00:00:00 2001
From: Sultan Alsawaf <sultan@kerneltoast.com>
Date: Tue, 21 Mar 2017 10:42:56 -0700
Subject: [PATCH 048/100] msm: camera-legacy: isp: Fix memory leaks in vfe
 probe

Memory is needlessly allocated to vfe_parent_dev and vfe_parent_dev->common_sd
and never freed.

Since the allocated memory is not used anywhere outside of vfe_probe(),
and since it's unnecessary, just remove the allocations entirely and use a
stack variable instead.

Change-Id: I69535a03e6249fc2f8c9203797c93c2799c4ca92
Signed-off-by: Sultan Alsawaf <sultan@kerneltoast.com>
Signed-off-by: Albert I <kras@raphielgang.org>
---
 .../msm/camera_v2-legacy/isp/msm_isp.c        | 41 ++++---------------
 1 file changed, 7 insertions(+), 34 deletions(-)

diff --git a/drivers/media/platform/msm/camera_v2-legacy/isp/msm_isp.c b/drivers/media/platform/msm/camera_v2-legacy/isp/msm_isp.c
index d889a05fce56..addad1658572 100644
--- a/drivers/media/platform/msm/camera_v2-legacy/isp/msm_isp.c
+++ b/drivers/media/platform/msm/camera_v2-legacy/isp/msm_isp.c
@@ -533,67 +533,40 @@ static int vfe_set_common_data(struct platform_device *pdev)
 
 static int vfe_probe(struct platform_device *pdev)
 {
-	struct vfe_parent_device *vfe_parent_dev;
 	int rc = 0;
 	struct device_node *node;
 	struct platform_device *new_dev = NULL;
 	uint32_t i = 0;
 	char name[10] = "\0";
+	uint32_t num_hw_sd;
 
-	vfe_parent_dev = kzalloc(sizeof(struct vfe_parent_device),
-		GFP_KERNEL);
-	if (!vfe_parent_dev) {
-		rc = -ENOMEM;
-		goto end;
-	}
-
-	vfe_parent_dev->common_sd = kzalloc(
-		sizeof(struct msm_vfe_common_subdev), GFP_KERNEL);
-	if (!vfe_parent_dev->common_sd) {
-		rc = -ENOMEM;
-		goto probe_fail1;
-	}
-
-	vfe_parent_dev->common_sd->common_data = &vfe_common_data;
 	memset(&vfe_common_data, 0, sizeof(vfe_common_data));
 	spin_lock_init(&vfe_common_data.common_dev_data_lock);
 	spin_lock_init(&vfe_common_data.common_dev_axi_lock);
 
-	of_property_read_u32(pdev->dev.of_node,
-		"num_child", &vfe_parent_dev->num_hw_sd);
+	of_property_read_u32(pdev->dev.of_node, "num_child", &num_hw_sd);
 
-	for (i = 0; i < vfe_parent_dev->num_hw_sd; i++) {
+	for (i = 0; i < num_hw_sd; i++) {
 		node = NULL;
 		snprintf(name, sizeof(name), "qcom,vfe%d", i);
 		node = of_find_node_by_name(NULL, name);
 		if (!node) {
 			pr_err("%s: Error! Cannot find node in dtsi %s\n",
 				__func__, name);
-			goto probe_fail2;
+			goto end;
 		}
 		new_dev = of_find_device_by_node(node);
 		if (!new_dev) {
 			pr_err("%s: Failed to find device on bus %s\n",
 				__func__, node->name);
-			goto probe_fail2;
+			goto end;
 		}
-		vfe_parent_dev->child_list[i] = new_dev;
-		new_dev->dev.platform_data =
-			(void *)vfe_parent_dev->common_sd->common_data;
+		new_dev->dev.platform_data = &vfe_common_data;
 		rc = vfe_set_common_data(new_dev);
 		if (rc < 0)
-			goto probe_fail2;
+			goto end;
 	}
 
-	vfe_parent_dev->num_sd = vfe_parent_dev->num_hw_sd;
-	vfe_parent_dev->pdev = pdev;
-
-	return rc;
-
-probe_fail2:
-	kfree(vfe_parent_dev->common_sd);
-probe_fail1:
-	kfree(vfe_parent_dev);
 end:
 	return rc;
 }
-- 
2.20.1

