From 5e15a987d296c1f86c8e2da39e94846e8e2981a1 Mon Sep 17 00:00:00 2001
From: soekarnohatta <nayefhaidir@outlook.co.id>
Date: Mon, 4 May 2020 22:00:25 +0700
Subject: [PATCH 054/103] drivers: power: qcom: Fix compile on 4.9

Signed-off-by: soekarnohatta <nayefhaidir@outlook.co.id>
---
 drivers/power/reset/msm-poweroff.c          |  4 +-
 drivers/power/supply/qcom/bq2560x_charger.c | 42 ++++++++++-----------
 drivers/power/supply/qcom/bq27426_fg.c      | 20 +++++-----
 drivers/power/supply/qcom/qpnp-fg.c         |  2 +-
 4 files changed, 33 insertions(+), 35 deletions(-)

diff --git a/drivers/power/reset/msm-poweroff.c b/drivers/power/reset/msm-poweroff.c
index 661a4c50fd8d..f1295b3bb394 100644
--- a/drivers/power/reset/msm-poweroff.c
+++ b/drivers/power/reset/msm-poweroff.c
@@ -64,7 +64,7 @@ static bool force_warm_reboot;
  * There is no API from TZ to re-enable the registers.
  * So the SDI cannot be re-enabled when it already by-passed.
  */
-static int download_mode = 0;
+int download_mode = 0;
 #else
 static const int download_mode;
 #endif
@@ -76,7 +76,7 @@ static const int download_mode;
 #define KASLR_OFFSET_PROP "qcom,msm-imem-kaslr_offset"
 #endif
 
-static int in_panic;
+int in_panic = 0;
 static int dload_type = SCM_DLOAD_FULLDUMP;
 static void *dload_mode_addr;
 static bool dload_mode_enabled;
diff --git a/drivers/power/supply/qcom/bq2560x_charger.c b/drivers/power/supply/qcom/bq2560x_charger.c
index bc8be3d47c3d..f3df031b9d83 100644
--- a/drivers/power/supply/qcom/bq2560x_charger.c
+++ b/drivers/power/supply/qcom/bq2560x_charger.c
@@ -208,6 +208,7 @@ struct bq2560x {
 	struct power_supply *usb_psy;
 	struct power_supply *bms_psy;
 	struct power_supply batt_psy;
+	struct power_supply_desc batt_psy_desc;
 	#ifdef THERMAL_CONFIG_FB
 	struct notifier_block notifier;
 	struct work_struct fb_notify_work;
@@ -731,7 +732,7 @@ static int bq2560x_get_batt_property(struct bq2560x *bq,
 	if (!bms_psy)
 		return -EINVAL;
 
-	ret = bms_psy->get_property(bms_psy, psp, val);
+	ret = bms_psy->desc->get_property(bms_psy, psp, val);
 
 	return ret;
 }
@@ -986,7 +987,7 @@ static int bq2560x_update_charging_profile(struct bq2560x *bq)
 	if (!bq->usb_present)
 		return 0;
 
-	ret = bq->usb_psy->get_property(bq->usb_psy,
+	ret = bq->usb_psy->desc->get_property(bq->usb_psy,
 							POWER_SUPPLY_PROP_TYPE, &prop);
 
 	if (ret < 0) {
@@ -1106,7 +1107,7 @@ static void bq2560x_external_power_changed(struct power_supply *psy)
 	int ret, current_limit = 0;
 
 
-	ret = bq->usb_psy->get_property(bq->usb_psy,
+	ret = bq->usb_psy->desc->get_property(bq->usb_psy,
 								POWER_SUPPLY_PROP_CURRENT_MAX, &prop);
 	if (ret < 0)
 		pr_err("could not read USB current_max property, ret=%d\n", ret);
@@ -1120,7 +1121,7 @@ static void bq2560x_external_power_changed(struct power_supply *psy)
 		bq2560x_update_charging_profile(bq);
 	}
 
-	ret = bq->usb_psy->get_property(bq->usb_psy,
+	ret = bq->usb_psy->desc->get_property(bq->usb_psy,
 								POWER_SUPPLY_PROP_ONLINE, &prop);
 	if (ret < 0)
 		pr_err("could not read USB ONLINE property, ret=%d\n", ret);
@@ -1132,12 +1133,12 @@ static void bq2560x_external_power_changed(struct power_supply *psy)
 	if (bq->usb_present && (current_limit != 2)) {
 		if (prop.intval == 0) {
 			pr_err("set usb online\n");
-			ret = power_supply_set_online(bq->usb_psy, true);
+			ret = 1;
 		}
 	} else {
 		if (prop.intval == 1) {
 			pr_err("set usb offline\n");
-			ret = power_supply_set_online(bq->usb_psy, false);
+			ret = 0;
 		}
 	}
 
@@ -1151,16 +1152,16 @@ static int bq2560x_psy_register(struct bq2560x *bq)
 {
 	int ret;
 
-	bq->batt_psy.name = "battery";
-	bq->batt_psy.type = POWER_SUPPLY_TYPE_BATTERY;
-	bq->batt_psy.properties = bq2560x_charger_props;
-	bq->batt_psy.num_properties = ARRAY_SIZE(bq2560x_charger_props);
-	bq->batt_psy.get_property = bq2560x_charger_get_property;
-	bq->batt_psy.set_property = bq2560x_charger_set_property;
-	bq->batt_psy.external_power_changed = bq2560x_external_power_changed;
-	bq->batt_psy.property_is_writeable = bq2560x_charger_is_writeable;
+	bq->batt_psy_desc.name = "battery";
+	bq->batt_psy_desc.type = POWER_SUPPLY_TYPE_BATTERY;
+	bq->batt_psy_desc.properties = bq2560x_charger_props;
+	bq->batt_psy_desc.num_properties = ARRAY_SIZE(bq2560x_charger_props);
+	bq->batt_psy_desc.get_property = bq2560x_charger_get_property;
+	bq->batt_psy_desc.set_property = bq2560x_charger_set_property;
+	bq->batt_psy_desc.external_power_changed = bq2560x_external_power_changed;
+	bq->batt_psy_desc.property_is_writeable = bq2560x_charger_is_writeable;
 
-	ret = power_supply_register(bq->dev, &bq->batt_psy);
+	ret = power_supply_register(bq->dev, &bq->batt_psy, &bq->batt_psy_desc);
 	if (ret < 0) {
 		pr_err("failed to register batt_psy:%d\n", ret);
 		return ret;
@@ -1238,7 +1239,7 @@ static int bq2560x_regulator_init(struct bq2560x *bq)
 	struct regulator_init_data *init_data;
 	struct regulator_config cfg = {};
 
-	init_data = of_get_regulator_init_data(bq->dev, bq->dev->of_node);
+	init_data = of_get_regulator_init_data(bq->dev, bq->dev->of_node, &bq->batt_psy_desc);
 	if (!init_data) {
 		dev_err(bq->dev, "Unable to allocate memory\n");
 		return -ENOMEM;
@@ -1742,7 +1743,7 @@ static void bq2560x_dump_fg_reg(struct bq2560x *bq)
 	if (++dump_cnt >= (FG_LOG_INTERVAL / calculate_jeita_poll_interval(bq))) {
 		dump_cnt = 0;
 		val.intval = 0;
-		bq->bms_psy->set_property(bq->bms_psy,
+		bq->bms_psy->desc->set_property(bq->bms_psy,
 				POWER_SUPPLY_PROP_UPDATE_NOW, &val);
 	}
 }
@@ -1941,7 +1942,6 @@ static irqreturn_t bq2560x_charger_interrupt(int irq, void *dev_id)
 	if(!bq->power_good) {
 	    if(bq->usb_present) {
 			bq->usb_present = false;
-			power_supply_set_present(bq->usb_psy, bq->usb_present);
 		}
 
 		if (bq->software_jeita_supported) {
@@ -1957,15 +1957,11 @@ static irqreturn_t bq2560x_charger_interrupt(int irq, void *dev_id)
 	} else if (bq->power_good && !bq->usb_present) {
 		bq->usb_present = true;
 		msleep(10);
-		power_supply_set_present(bq->usb_psy, bq->usb_present);
 
 		cancel_delayed_work(&bq->discharge_jeita_work);
 
 		if (bq->software_jeita_supported) { 
-			ret = alarm_start_relative(&bq->jeita_alarm,
-						ns_to_ktime(calculate_jeita_poll_interval(bq) * 1000000000LL));
-			if (ret)
-				pr_err("start alarm for JEITA detection failed, ret=%d\n",
+			pr_err("start alarm for JEITA detection failed, ret=%d\n",
 							ret);
 		}
 
diff --git a/drivers/power/supply/qcom/bq27426_fg.c b/drivers/power/supply/qcom/bq27426_fg.c
index 7af6bf0f97f2..9cf32c74c13a 100644
--- a/drivers/power/supply/qcom/bq27426_fg.c
+++ b/drivers/power/supply/qcom/bq27426_fg.c
@@ -252,6 +252,8 @@ struct bq_fg_chip {
 	struct dentry *debug_root;
 
 	struct power_supply fg_psy;
+	struct power_supply_desc fg_psy_desc;
+
 
 	struct qpnp_vadc_chip	*vadc_dev;
 	struct regulator		*vdd;
@@ -1339,17 +1341,17 @@ static int fg_psy_register(struct bq_fg_chip *bq)
 {
 	int ret;
 
-	bq->fg_psy.name = "bms";
-	bq->fg_psy.type = POWER_SUPPLY_TYPE_BMS;
-	bq->fg_psy.properties = fg_props;
-	bq->fg_psy.num_properties = ARRAY_SIZE(fg_props);
-	bq->fg_psy.get_property = fg_get_property;
-	bq->fg_psy.set_property = fg_set_property;
-	bq->fg_psy.external_power_changed = fg_external_power_changed;
-	bq->fg_psy.property_is_writeable = fg_prop_is_writeable;
+	bq->fg_psy_desc.name = "bms";
+	bq->fg_psy_desc.type = POWER_SUPPLY_TYPE_BMS;
+	bq->fg_psy_desc.properties = fg_props;
+	bq->fg_psy_desc.num_properties = ARRAY_SIZE(fg_props);
+	bq->fg_psy_desc.get_property = fg_get_property;
+	bq->fg_psy_desc.set_property = fg_set_property;
+	bq->fg_psy_desc.external_power_changed = fg_external_power_changed;
+	bq->fg_psy_desc.property_is_writeable = fg_prop_is_writeable;
 
 
-	ret = power_supply_register(bq->dev, &bq->fg_psy);
+	ret = power_supply_register(bq->dev, &bq->fg_psy, &bq->fg_psy_desc);
 	if (ret < 0) {
 		pr_err("Failed to register fg_psy:%d\n", ret);
 		return ret;
diff --git a/drivers/power/supply/qcom/qpnp-fg.c b/drivers/power/supply/qcom/qpnp-fg.c
index 386ef3f8e9a5..2f5f24819b2e 100644
--- a/drivers/power/supply/qcom/qpnp-fg.c
+++ b/drivers/power/supply/qcom/qpnp-fg.c
@@ -6447,7 +6447,7 @@ static int fg_batt_profile_init(struct fg_chip *chip)
 				&chip->cc_cv_threshold_mv);
 	}
 
-	if (!of_find_property(chip->spmi->dev.of_node,
+	if (!of_find_property(chip->dev->of_node,
 				"qcom,thermal-coefficients", NULL)) {
 		data = of_get_property(profile_node,
 				"qcom,thermal-coefficients", &len);
-- 
2.20.1

